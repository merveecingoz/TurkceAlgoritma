2111502015 Merve Cingöz


public class BellmanFord {

  private final int V; 
  private final int E; 

  private final int[][] graph; 

  public BellmanFord(int V, int E) {
    this.V = V;
    this.E = E;
    graph = new int[V][V];
    for (int i = 0; i < V; i++) {
      for (int j = 0; j < V; j++) {
        graph[i][j] = Integer.MAX_VALUE; 
      }
    }
  }

  public void addEdge(int src, int dest, int weight) {
    graph[src][dest] = weight; 
  }

 
  private void relax(int u, int v, int w) {
    if (graph[u][v] > graph[u][v] + w) { 
      graph[u][v] = graph[u][v] + w;
    }
  }

 
  public boolean BellmanFord(int source) {
    int[] distance = new int[V]; 

    for (int i = 0; i < V; i++) {
      distance[i] = Integer.MAX_VALUE;
    }
    distance[source] = 0;

   
    for (int i = 1; i < V; i++) {
      for (int j = 0; j < E; j++) {
        int src = graph[j][0]; 
        int dest = graph[j][1]; 
        int weight = graph[j][2]; 
        relax(src, dest, weight);
      }
    }

   )
    for (int i = 0; i < E; i++) {
      int src = graph[i][0];
      int dest = graph[i][1];
      int weight = graph[i][2];
      if (graph[src][dest] > graph[src][dest] + weight) {
        System.out.println("Graph contains negative weight cycle");
        return false;
      }
    }

  
    System.out.println("Vertex \t\tDistance from Source");
    for (int i = 0; i < V; ++i) {
      System.out.println(i + "\t\t" + distance[i]);
    }
    return true; // No negative weight cycles found
  }

  public static void main(String[] args) {
    int V = 5; // Number of vertices
    int E = 8; // Number of edges
    BellmanFord graph = new BellmanFord(V, E);

    // Ağirliklari ekleme
    graph.addEdge(0, 1, -1);
    graph.addEdge(0, 2, 4);
    graph.addEdge(1, 2, 3);
    graph.addEdge(1, 3, 2);
    graph.addEdge(2, 1, 1);
    graph.addEdge(3, 2, 5);
    graph.addEdge(3, 4, -3);
    graph.addEdge(4, 0, 7);

    
    graph.BellmanFord(0);
  }
}
